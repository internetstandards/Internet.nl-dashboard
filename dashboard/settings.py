# SPDX-License-Identifier: Apache-2.0
import os
from datetime import timedelta
from pathlib import Path

import sentry_sdk
from corsheaders.defaults import default_headers
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

from . import __version__
from .settings_constance import CONSTANCE_CONFIG_FIELDSETS  # noqa  # pylint: disable=unused-import
from .settings_constance import CONSTANCE_ADDITIONAL_FIELDS, CONSTANCE_BACKEND, CONSTANCE_CONFIG
from .settings_jet import JET_SIDE_MENU_COMPACT, JET_SIDE_MENU_ITEMS  # noqa  # pylint: disable=unused-import
from .settings_util import get_field_encryption_key_from_file_or_env, get_secret_key_from_file_or_env

# import all of this and don't auto-lint it away because there are no references here.
# most code refers to these settings.


"""
Django settings for dashboard project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# secret key is used for various cryptographic functions, it should be unique per installation
# the key is generated and cached the first time the application is started
SECRET_KEY = get_secret_key_from_file_or_env()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)
if DEBUG:
    print("Django debugging is enabled.")

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1,::1").split(",")

# Application definition

INSTALLED_APPS = [
    # Constance
    "constance",
    # not needed since 3.0
    # 'constance.backends.database',
    # Jet
    "jet.dashboard",
    "jet",
    "nested_admin",
    "taggit",
    # Import Export
    "import_export",
    # Standard Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # Allow a client to access the data:
    "corsheaders",
    # Periodic tasks
    "django_celery_beat",
    # Web Security Map (todo: minimize the subset)
    # The reason (model) why it's included is in the comments.
    "websecmap.app",  # Job
    "websecmap.api",
    "websecmap.organizations",  # Url
    "websecmap.scanners",  # Endpoint, EndpointGenericScan, UrlGenericScan
    "websecmap.reporting",  # Various reporting functions (might be not needed)
    "websecmap.map",  # because some scanners are intertwined with map configurations. That needs to go.
    # "websecmap.game",
    # Custom Apps
    # These apps overwrite whatever is declared above, for example the user information.
    # Yet, it does not overwrite management commands.
    "dashboard.internet_nl_dashboard",
    # Two factor auth
    "phonenumber_field",
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "two_factor",
    # Django activity stream
    # https://django-activity-stream.readthedocs.io/en/latest/installation.html
    "django.contrib.sites",
    "actstream",
    # Sending templated and translatable emails
    "django_mail_admin",
    # allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # wsm:
    # "storages",
]

# django activity stream wants a site-id:
SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Two factor Auth
    "django_otp.middleware.OTPMiddleware",
    # https://docs.djangoproject.com/en/4.2/ref/middleware/#django.middleware.gzip.GZipMiddleware
    # This middleware should be placed before any other middleware that need to read or write the response body so
    # that compression happens afterward.
    # https://github.com/internetstandards/Internet.nl-dashboard/issues/436
    # 'django.middleware.gzip.GZipMiddleware',
    # allauth
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "dashboard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [f"{BASE_DIR}/"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "constance.context_processors.config",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "dashboard.internet_nl_dashboard.context_processors.template_settings_processor",
            ],
        },
    }
]

WSGI_APPLICATION = "dashboard.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASE_OPTIONS = {
    "mysql": {
        "init_command": "SET character_set_connection=utf8,"
        "collation_connection=utf8_unicode_ci,"
        "sql_mode='STRICT_ALL_TABLES';"
    },
}
DB_ENGINE = os.environ.get("DB_ENGINE", "mysql")
DATABASE_ENGINES = {
    "mysql": "dashboard.app.backends.mysql",
}
DATABASES_SETTINGS = {
    # persist local database used during development (runserver)
    "dev": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.environ.get("DB_NAME", "db.sqlite3"),
    },
    # sqlite memory database for running tests without
    "test": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.environ.get("DB_NAME", "db.sqlite3"),
    },
    # for production get database settings from environment (eg: docker)
    "production": {
        "ENGINE": DATABASE_ENGINES.get(DB_ENGINE, f"django.db.backends.{DB_ENGINE}"),
        "NAME": os.environ.get("DB_NAME", "dashboard"),
        "USER": os.environ.get("DB_USER", "dashboard"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "dashboard"),
        "HOST": os.environ.get("DB_HOST", "mysql"),
        "OPTIONS": DATABASE_OPTIONS.get(os.environ.get("DB_ENGINE", "mysql"), {}),
    },
}
# allow database to be selected through environment variables
DATABASE = os.environ.get("DJANGO_DATABASE", "dev")
DATABASES = {"default": DATABASES_SETTINGS[DATABASE]}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        # fix 514
        "OPTIONS": {
            "min_length": 16,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

# todo: remove in the migration to django 5.0
USE_L10N = True

USE_TZ = True

LOCALE_PATHS = ["locale"]

LANGUAGE_COOKIE_NAME = "dashboard_language"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

# Absolute path to aggregate to and serve static file from.
if DEBUG:
    STATIC_ROOT = "static"
else:
    STATIC_ROOT = os.environ.get("STATIC_ROOT", "/srv/dashboard/static/")  # noqa

MEDIA_ROOT = Path(os.environ.get("MEDIA_ROOT", Path(__file__).parent / "uploads"))
UPLOAD_ROOT: str = os.environ.get("MEDIA_ROOT", f"{os.path.abspath(os.path.dirname(__file__))}/uploads/")

# Two factor auth
LOGIN_URL = "two_factor:login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = LOGIN_URL
TWO_FACTOR_QR_FACTORY = "qrcode.image.pil.PilImage"
# 6 supports google authenticator
TWO_FACTOR_TOTP_DIGITS = 6
TWO_FACTOR_PATCH_ADMIN = True

# something from websecmap
TOOLS = {"organizations": {"import_data_dir": ""}}

# Encrypted fields
FIELD_ENCRYPTION_KEY: bytes = get_field_encryption_key_from_file_or_env()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",  # sys.stdout
            "formatter": "color",
        },
    },
    "formatters": {
        "debug": {
            "format": "%(asctime)s\t%(levelname)-8s - %(filename)-20s:%(lineno)-4s - " "%(funcName)20s() - %(message)s",
        },
        "color": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s%(asctime)s\t%(levelname)-8s - " "%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "log_colors": {
                "DEBUG": "green",
                "INFO": "white",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "bold_red",
            },
        },
    },
    "loggers": {
        # Used when there is no log defined or loaded. Disabled given we always use __package__ to log.
        # Would you enable it, all logging messages will be logged twice.
        # '': {
        #     'handlers': ['console'],
        #     'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        # },
        # Default Django logging, we expect django to work, and therefore only show INFO messages.
        # It can be smart to sometimes want to see what's going on here, but not all the time.
        # https://docs.djangoproject.com/en/2.1/topics/logging/#django-s-logging-extensions
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        "celery.app.trace": {
            "handlers": ["console"],
            "level": os.getenv("CELERY_LOG_LEVEL", "INFO"),
        },
        # logging defaults to INFO, DEBUG logging is enabled in development using .envrc
        "dashboard": {
            "handlers": ["console"],
            "level": os.getenv("APP_LOG_LEVEL", "INFO"),
        },
        "websecmap": {
            "handlers": ["console"],
            "level": os.getenv("APP_LOG_LEVEL", "INFO"),
        },
        "test": {
            "handlers": ["console"],
            "level": os.getenv("APP_LOG_LEVEL", "INFO"),
        },
    },
}

# settings to get WebSecMap to work:
# Celery 4.0 settings
# Pickle can work, but you need to use certificates to communicate (to verify the right origin)
# It's preferable not to use pickle, yet it's overly convenient as the normal serializer can not
# even serialize dicts.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html
# see: https://blog.nelhage.com/2011/03/exploiting-pickle/
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_EVENT_SERIALIZER = "json"

# Celery config
CELERY_BROKER_URL = os.environ.get("BROKER", "redis://localhost:6379/0")
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = "UTC"

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 400
CELERY_RESULT_EXPIRES = timedelta(hours=4)

# Use the value of 2 for celery prefetch multiplier. Previous was 1. The
# assumption is that 1 will block a worker thread until the current (rate
# limited) task is completed. When using 2 (or higher) the assumption is that
# celery will drop further rate limited task from the internal worker queue and
# fetch other tasks tasks that could be executed (spooling other rate limited
# tasks through in the process but to no hard except for a slight drop in
# overall throughput/performance). A to high value for the prefetch multiplier
# might result in high priority tasks not being picked up as Celery does not
# seem to do prioritisation in worker queues but only on the broker
# queues. The value of 2 is currently selected because it higher than 1,
# behaviour needs to be observed to decide if raising this results in
# further improvements without impacting the priority feature.
CELERY_WORKER_PREFETCH_MULTIPLIER = 2

# numer of tasks to be executed in parallel by celery
CELERY_WORKER_CONCURRENCY = 10

# Workers will scale up and scale down depending on the number of tasks
# available. To prevent workers from scaling down while still doing work,
# the ACKS_LATE setting is used. This insures that a task is removed from
# the task queue after the task is performed. This might result in some
# issues where tasks that don't finish or crash keep being executed:
# thus for tasks that are not programmed perfectly it will raise a number
# of repeated exceptions which will need to be debugged.
CELERY_TASK_ACKS_LATE = True

"""
This number can be tweaked depending on the number of threads/green-threads (eventlet/gevent) using a connection.
For example running eventlet with 1000 greenlets that use a connection to the broker, contention can arise and you
should consider increasing the limit.
We use 20 greenthreads or so. The error we see is:
redis.exceptions.ConnectionError: Error 104 while writing to socket. Connection reset by peer.
The error is not visible when running a single task or just a scan, or progressing the individual task where the crash
occurs. So probably connection limits are the issue. Defaults to 10. So that makes sense why things go wrong.
"""
CELERY_BROKER_POOL_LIMIT = 30

# default is empty, we can set things like 'max_connections': 30.
CELERY_BROKER_TRANSPORT_OPTIONS = {}  # type: ignore

# Settings for statsd metrics collection. Statsd defaults over UDP port 8125.
# https://django-statsd.readthedocs.io/en/latest/#celery-signals-integration
STATSD_HOST = os.environ.get("STATSD_HOST", "127.0.0.1")
STATSD_PORT = os.environ.get("STATSD_PORT", "8125")
STATSD_PREFIX = "dashboard"
STATSD_TELEGRAF = True
# register hooks for selery tasks
STATSD_CELERY_SIGNALS = True
# send database query metric (in production, in development we have debug toolbar for this)
if not DEBUG:
    STATSD_PATCHES = [
        "django_statsd.patches.db",
    ]


OUTPUT_DIR = os.environ.get("OUTPUT_DIR", f"{os.path.abspath(os.path.dirname(__file__))}/")
VENDOR_DIR = os.environ.get("VENDOR_DIR", f"{os.path.abspath(f'{os.path.dirname(__file__)}/../vendor/')}/")

if DEBUG:
    # too many sql variables....
    DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000


# Security options
if not DEBUG:
    SESSION_COOKIE_SECURE = True  # insecure by default
    SESSION_COOKIE_SAMESITE = "Lax"
    SESSION_COOKIE_AGE = 1209600  # two weeks, could be longer
    CSRF_COOKIE_SECURE = True  # insecure by default

if SENTRY_DSN := os.environ.get("SENTRY_DSN"):
    # new sentry_sdk implementation, with hopes to also get exceptions from workers.
    sentry_sdk.init(  # pylint: disable=abstract-class-instantiated  # (following the documentation)  # type: ignore
        dsn=SENTRY_DSN,
        integrations=[CeleryIntegration(), DjangoIntegration(), RedisIntegration()],
        release=__version__,
        send_default_pii=False,
    )

SENTRY_ORGANIZATION = os.environ.get("SENTRY_ORGANIZATION", "internet-cleanup-foundation")
SENTRY_PROJECT = os.environ.get("SENTRY_PROJECT", "internet-nl-dashboard")
SENTRY_PROJECT_URL = f"https://sentry.io/{SENTRY_ORGANIZATION}/{SENTRY_PROJECT}"

# Copied from internet.nl

# Supported languages.
# NOTE: Make sure that a DNS record for each language exists.
#       More information can be found in the README file.
LANGUAGES = sorted(
    [
        ("nl", "Dutch"),
        ("en", "English"),
    ],
    key=lambda x: x[0],
)

# email settings...
# django_mail_admin.backends.OutboxEmailBackend = Store sent mails in outbox, so we know what has been sent.
# It's not a log -> this is just a way to test things, and it will hang send_queued_mail.
EMAIL_USE_SSL = False
EMAIL_USE_TLS = False
EMAIL_HOST_PASSWORD = ""  # nosec
EMAIL_HOST_USER = ""
EMAIL_PORT = ""
# As there are sanity checks, these settings need to be present during debugging too.
EMAIL_HOST = ""
EMAIL_BACKEND = "django_mail_admin.backends.CustomEmailBackend"
if DEBUG:
    # 25 megs for importing reports from live situations
    DATA_UPLOAD_MAX_MEMORY_SIZE = 26214400

"""
Django Jet 3:
From Django 3.0 the default value of the X_FRAME_OPTIONS setting was changed from SAMEORIGIN to DENY. This can
cause errors for popups such as for the Field Lookup Popup. To solve this you should add the following to your
Django project settings.py file:
Todo: Only needed for /admin urls, not for other urls: it's fine when people embed the map, desired even!
"""
X_FRAME_OPTIONS = "SAMEORIGIN"

# See
# https://github.com/adamchainz/django-cors-headers
CORS_ALLOWED_ORIGINS = [
    os.environ.get("CORS_ALLOWED_ACCEPT_DOMAIN", "https://acc.dashboard.internet.nl"),
    os.environ.get("CORS_ALLOWED_DOMAIN", "https://dashboard.internet.nl"),
    "http://localhost:5173",
]

# as soon as this is set, the vue post stuff doesn't work anymore.
# CSRF_HEADER_NAME = 'X-CSRFToken'

CORS_ALLOW_HEADERS = list(default_headers) + [
    "cache-control",
    "X-CSRFToken",
    "csrfmiddlewaretoken",
]

# allow cookies to be sent as well, we have to, because there are logins and such.
CORS_ALLOW_CREDENTIALS = True

LOCKFILE_DIR = os.environ.get("LOCKFILE_DIR", f"{os.path.abspath(os.path.dirname(__file__))}/lockfiles/")

TAGGIT_CASE_INSENSITIVE = True

# Django 3.2
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

MEDIA_URL = os.environ.get("MEDIA_URL", "/admin/uploads/")

# New in django 4.2:
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
    "screenshots": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "paper_trail": {"BACKEND": "django.core.files.storage.FileSystemStorage", "OPTIONS": {"base_url": MEDIA_URL}},
}

# required from django 4.0
CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "http://127.0.0.1",
    "http://::1",
    "http://localhost:5173",
    os.environ.get("CSRF_TRUSTED_ORIGINS_DEFAULT_DOMAIN", "https://internet.nl"),
    os.environ.get("CSRF_TRUSTED_ORIGINS_WILDCARD_DOMAIN", "https://*.internet.nl"),
]

REPORT_STORAGE_DIR = Path(os.environ.get("REPORT_STORAGE_DIR", MEDIA_ROOT / "diskreports"))

# todo: should be handled better, this is a fix to know for sure reports can be written to disk...
# check diskreport dir, todo: move to django file field
FULL_REPORT_STORAGE_DIR = f"{REPORT_STORAGE_DIR}original/UrlListReport/"
if not os.path.isdir(FULL_REPORT_STORAGE_DIR):
    os.makedirs(FULL_REPORT_STORAGE_DIR, exist_ok=True)

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

# https://docs.allauth.org/en/latest/installation/quickstart.html
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         # For each OAuth based provider, either add a ``SocialApp``
#         # (``socialaccount`` app) containing the required client
#         # credentials, or list them here:
#         'APP': {
#             'client_id': '123',
#             'secret': '456',
#             'key': ''
#         }
#     }
# }

# make sure these imports don't get removed by linting tools
__all__ = ["CONSTANCE_CONFIG", "CONSTANCE_BACKEND", "CONSTANCE_ADDITIONAL_FIELDS", "CONSTANCE_CONFIG_FIELDSETS"]
