# SPDX-License-Identifier: Apache-2.0
import os
from collections import OrderedDict
from datetime import timedelta

import sentry_sdk
from corsheaders.defaults import default_headers
from django.utils.translation import gettext_lazy as _
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

__version__ = '0.0.0'

"""
Django settings for dashboard project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# The routine validate_keys_are_changed is run in production and will prevent the default keys to be used.
SECRET_KEY: str = os.environ.get('SECRET_KEY', '_dzlo^9d#ox6!7c9rju@=u8+4^sprqocy3s*l*ejc2yr34@&98')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False)
if DEBUG:
    print('Django debugging is enabled.')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,::1').split(',')

# Application definition

INSTALLED_APPS = [
    # Constance
    'constance',
    'constance.backends.database',

    # Jet
    'jet.dashboard',
    'jet',
    'nested_admin',

    "taggit",

    # Import Export
    'import_export',

    # Standard Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Allow a client to access the data:
    'corsheaders',

    # Periodic tasks
    'django_celery_beat',

    # Web Security Map (todo: minimize the subset)
    # The reason (model) why it's included is in the comments.
    'websecmap.app',  # Job
    'websecmap.api',
    'websecmap.organizations',  # Url
    'websecmap.scanners',  # Endpoint, EndpointGenericScan, UrlGenericScan
    'websecmap.reporting',  # Various reporting functions (might be not needed)
    'websecmap.map',  # because some scanners are intertwined with map configurations. That needs to go.
    'websecmap.game',


    # Custom Apps
    # These apps overwrite whatever is declared above, for example the user information.
    # Yet, it does not overwrite management commands.
    'dashboard.internet_nl_dashboard',

    # Two factor auth
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'two_factor',
    # Django activity stream
    # https://django-activity-stream.readthedocs.io/en/latest/installation.html
    'django.contrib.sites',
    'actstream',

    # Sending templated and translatable emails
    'django_mail_admin',
]

# django activity stream wants a site-id:
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Two factor Auth
    'django_otp.middleware.OTPMiddleware',
]

ROOT_URLCONF = 'dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR + '/',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'constance.context_processors.config',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dashboard.internet_nl_dashboard.context_processors.template_settings_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'dashboard.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASE_OPTIONS = {
    'mysql': {'init_command': "SET character_set_connection=utf8,"
                              "collation_connection=utf8_unicode_ci,"
                              "sql_mode='STRICT_ALL_TABLES';"},
}
DB_ENGINE = os.environ.get('DB_ENGINE', 'mysql')
DATABASE_ENGINES = {
    'mysql': 'dashboard.app.backends.mysql',
}
DATABASES_SETTINGS = {
    # persisten local database used during development (runserver)
    'dev': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.environ.get('DB_NAME', 'db.sqlite3'),
    },
    # sqlite memory database for running tests without
    'test': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.environ.get('DB_NAME', 'db.sqlite3'),
    },
    # for production get database settings from environment (eg: docker)
    'production': {
        'ENGINE': DATABASE_ENGINES.get(DB_ENGINE, 'django.db.backends.' + DB_ENGINE),
        'NAME': os.environ.get('DB_NAME', 'dashboard'),
        'USER': os.environ.get('DB_USER', 'dashboard'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'dashboard'),
        'HOST': os.environ.get('DB_HOST', 'mysql'),
        'OPTIONS': DATABASE_OPTIONS.get(os.environ.get('DB_ENGINE', 'mysql'), {})
    }
}
# allow database to be selected through environment variables
DATABASE = os.environ.get('DJANGO_DATABASE', 'dev')
DATABASES = {'default': DATABASES_SETTINGS[DATABASE]}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = ['locale']

LANGUAGE_COOKIE_NAME = 'dashboard_language'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# Absolute path to aggregate to and serve static file from.
if DEBUG:
    STATIC_ROOT = 'static'
else:
    STATIC_ROOT = os.environ.get('STATIC_ROOT', '/srv/dashboard/static/')  # noqa

MEDIA_ROOT = os.environ.get('MEDIA_ROOT', os.path.abspath(os.path.dirname(__file__)) + '/uploads/')
UPLOAD_ROOT: str = os.environ.get('MEDIA_ROOT', os.path.abspath(os.path.dirname(__file__)) + '/uploads/')

# Two factor auth
LOGIN_URL = "two_factor:login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = LOGIN_URL
TWO_FACTOR_QR_FACTORY = 'qrcode.image.pil.PilImage'
# 6 supports google authenticator
TWO_FACTOR_TOTP_DIGITS = 6
TWO_FACTOR_PATCH_ADMIN = True

# Encrypted fields
# Note that this key is not stored in the database, that would be a security risk.
# The key can be generated with the following routine:
# https://cryptography.io/en/latest/fernet/
# from cryptography.fernet import Fernet
# Fernet.generate_key()
# Make sure you remove the b' and ' from the string, so you're working with a string.
# For example: b'JjvHNnFMfEaGd7Y0SAHBRNZYGGpNs7ydEp-ixmKSvkQ=' becomes
# JjvHNnFMfEaGd7Y0SAHBRNZYGGpNs7ydEp-ixmKSvkQ=
# Also note that on the production server a different key is required, otherwise the server will not start.
# See dashboard_prdserver for more details.
# The routine validate_keys_are_changed is run in production and will prevent the default keys to be used.
IMPORTED_FIELD_ENCRYPTION_KEY: str = os.environ.get('FIELD_ENCRYPTION_KEY',
                                                    "JjvHNnFMfEaGd7Y0SAHBRNZYGGpNs7ydEp-ixmKSvkQ=")

# The encryption key under ENV variables can only be stored as a string. This means we'll have to parse it to bytes.
FIELD_ENCRYPTION_KEY: bytes = IMPORTED_FIELD_ENCRYPTION_KEY.encode()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',  # sys.stdout
            'formatter': 'color',
        },
    },
    'formatters': {
        'debug': {
            'format': '%(asctime)s\t%(levelname)-8s - %(filename)-20s:%(lineno)-4s - '
                      '%(funcName)20s() - %(message)s',
        },
        'color': {
            '()': 'colorlog.ColoredFormatter',
            'format': '%(log_color)s%(asctime)s\t%(levelname)-8s - '
                      '%(message)s',
            'datefmt': '%Y-%m-%d %H:%M',
            'log_colors': {
                'DEBUG': 'green',
                'INFO': 'white',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'bold_red',
            },
        }
    },
    'loggers': {
        # Used when there is no log defined or loaded. Disabled given we always use __package__ to log.
        # Would you enable it, all logging messages will be logged twice.
        # '': {
        #     'handlers': ['console'],
        #     'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        # },

        # Default Django logging, we expect django to work, and therefore only show INFO messages.
        # It can be smart to sometimes want to see what's going on here, but not all the time.
        # https://docs.djangoproject.com/en/2.1/topics/logging/#django-s-logging-extensions
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },

        'celery.app.trace': {
            'handlers': ['console'],
            'level': os.getenv('CELERY_LOG_LEVEL', 'INFO'),
        },
        # logging defaults to INFO, DEBUG logging is enabled in development using .envrc
        'dashboard': {
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'INFO'),
        },
        'websecmap': {
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'INFO'),
        },
        'test': {
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'INFO'),
        },
    },
}

# settings to get WebSecMap to work:
# Celery 4.0 settings
# Pickle can work, but you need to use certificates to communicate (to verify the right origin)
# It's preferable not to use pickle, yet it's overly convenient as the normal serializer can not
# even serialize dicts.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html
# see: https://blog.nelhage.com/2011/03/exploiting-pickle/
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_EVENT_SERIALIZER = "json"

# Celery config
CELERY_BROKER_URL = os.environ.get('BROKER', 'redis://localhost:6379/0')
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = 'UTC'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 400
CELERY_RESULT_EXPIRES = timedelta(hours=4)

# Use the value of 2 for celery prefetch multiplier. Previous was 1. The
# assumption is that 1 will block a worker thread until the current (rate
# limited) task is completed. When using 2 (or higher) the assumption is that
# celery will drop further rate limited task from the internal worker queue and
# fetch other tasks tasks that could be executed (spooling other rate limited
# tasks through in the process but to no hard except for a slight drop in
# overall throughput/performance). A to high value for the prefetch multiplier
# might result in high priority tasks not being picked up as Celery does not
# seem to do prioritisation in worker queues but only on the broker
# queues. The value of 2 is currently selected because it higher than 1,
# behaviour needs to be observed to decide if raising this results in
# further improvements without impacting the priority feature.
CELERY_WORKER_PREFETCH_MULTIPLIER = 2

# numer of tasks to be executed in parallel by celery
CELERY_WORKER_CONCURRENCY = 10

# Workers will scale up and scale down depending on the number of tasks
# available. To prevent workers from scaling down while still doing work,
# the ACKS_LATE setting is used. This insures that a task is removed from
# the task queue after the task is performed. This might result in some
# issues where tasks that don't finish or crash keep being executed:
# thus for tasks that are not programmed perfectly it will raise a number
# of repeated exceptions which will need to be debugged.
CELERY_TASK_ACKS_LATE = True

"""
This number can be tweaked depending on the number of threads/green-threads (eventlet/gevent) using a connection.
For example running eventlet with 1000 greenlets that use a connection to the broker, contention can arise and you
should consider increasing the limit.
We use 20 greenthreads or so. The error we see is:
redis.exceptions.ConnectionError: Error 104 while writing to socket. Connection reset by peer.
The error is not visible when running a single task or just a scan, or progressing the individual task where the crash
occurs. So probably connection limits are the issue. Defaults to 10. So that makes sense why things go wrong.
"""
CELERY_BROKER_POOL_LIMIT = 30

# default is empty, we can set things like 'max_connections': 30.
CELERY_BROKER_TRANSPORT_OPTIONS = {}  # type: ignore

# Settings for statsd metrics collection. Statsd defaults over UDP port 8125.
# https://django-statsd.readthedocs.io/en/latest/#celery-signals-integration
STATSD_HOST = os.environ.get('STATSD_HOST', '127.0.0.1')
STATSD_PORT = os.environ.get("STATSD_PORT", "8125")
STATSD_PREFIX = 'dashboard'
STATSD_TELEGRAF = True
# register hooks for selery tasks
STATSD_CELERY_SIGNALS = True
# send database query metric (in production, in development we have debug toolbar for this)
if not DEBUG:
    STATSD_PATCHES = ['django_statsd.patches.db', ]

TOOLS = {
    'organizations': {
        'import_data_dir': '',
    },
}

OUTPUT_DIR = os.environ.get('OUTPUT_DIR', os.path.abspath(os.path.dirname(__file__)) + '/')
VENDOR_DIR = os.environ.get('VENDOR_DIR', os.path.abspath(os.path.dirname(__file__) + '/../vendor/') + '/')

if DEBUG:
    # too many sql variables....
    DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

# Constance settings:
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CONSTANCE_ADDITIONAL_FIELDS = {
    "yes_no_null_select": [
        "django.forms.fields.ChoiceField",
        {"widget": "django.forms.Select", "choices": ((None, "-----"), ("1", "Yes"), ("0", "No"))},
    ],
    # Todo: no validation options, that is offloaded to the widget?
    "json": [
        "django.forms.fields.CharField",
        {"widget": "django.forms.Textarea"},
    ],
}

CONSTANCE_CONFIG = {
    'SCAN_AT_ALL': (
        True,
        'This quickly enables or disabled all scans. Note that scans in the scan queue will still be processed.',
        bool
    ),
    'DASHBOARD_MAXIMUM_DOMAINS_PER_SPREADSHEET': (
        10000,
        'The maximum amount of domains that can be imported via a spreadsheet at one time. '
        'In normal use cases these limits will not be reached.',
        int
    ),
    'DASHBOARD_MAXIMUM_LISTS_PER_SPREADSHEET': (
        200,
        'The maximum amount of lists that can be imported via a spreadsheet at one time. '
        'In normal usec ases these limits will not be reached.',
        int
    ),
    'DASHBOARD_MAXIMUM_DOMAINS_PER_LIST': (
        # The average list is about 300. 90DEV is 600. One exception of 13.000.
        10000,
        'The maximum amount of domains that can be in a list. There will be no crash when somebody imports more '
        'via a spreadsheet: it will be added but the list will refuse to scan and show a warning.'
        'In normal use cases these limits will not be reached.',
        int
    ),
    'DASHBOARD_FRONTEND_URL': (
        'https://dashboard.internet.nl',
        'The frontend of the dashboard is split from the django application, as move to more easily develop the '
        'frontend with modern techniques. Unfortunately autentication and second factor authentication are not '
        'converted to a javascript only approach. A good second factor alternative has to be figured out before '
        'we can move to a javascript-only frontend.',
        str
    ),
    'DASHBOARD_SIGNUP_NOTIFICATION_EMAIL_ADRESSES': (
        'vraag@internet.nl',
        'Comma separated list of email addresses to notify about new users.',
        str
    ),
    'DASHBOARD_FRONT_PAGE_URL_LISTS': (
        '',
        'Comma separated list of urllists of which all reports will be shared on the front page',
        str
    ),

    'INTERNET_NL_API_USERNAME': (
        'dummy',
        'Username for the internet.nl API. You can request one via the contact '
        'options on their site, https://internet.nl.',
        str),
    'INTERNET_NL_API_PASSWORD': (
        '',
        'Password for the internet.nl API',
        str
    ),
    'INTERNET_NL_API_URL': ('https://batch.internet.nl/api/batch/v2',
                            'The internet address for the Internet.nl API installation. Defaults to a version from '
                            '2020.', str),
    'INTERNET_NL_MAXIMUM_URLS': (1000, 'The maximum amount of domains per scan.', int),
    'EMAIL_FALLBACK_LANGUAGE': (
        'en',
        'Default language used for templates. Template should end with _en in lowercase.',
        str
    ),
    'EMAIL_NOTIFICATION_SENDER': (
        'noreply@dashboard.internet.nl',
        'The sender of email update notification, such as scan finished.',
        str
    ),
    'EMAIL_TEST_RECIPIENT': (
        'elger@internetcleanup.foundation',
        'Who receives the testmail from dashboard send_testmail.',
        str
    ),
    'EMAIL_DASHBOARD_ADDRESS': (
        'https://dashboard.internet.nl',
        'The address of the dashboard, can be set to any url. Available in email template at {{dashboard_address}}',
        str
    ),
    "SCANNER_NAMESERVERS": (
        '["1.1.1.1", "8.8.8.8", "9.9.9.9", "208.67.222.222", "8.26.56.26"]',
        "Nameservers used during scans (dns endpoints and subdomains). This string is loaded as JSON, but not validated"
        "due to limitations of this settings library. Be careful when editing(!). This information is cached and loaded"
        "only once every 10 minutes.",
        "json",
    ),
    "SCAN_TIMEOUT_MINUTES_DISCOVERING_ENDPOINTS": (1440, 'timeout for phase DISCOVERING_ENDPOINTS', int),
    "SCAN_TIMEOUT_MINUTES_RETRIEVING_SCANABLE_URLS": (1440, 'timeout for phase RETRIEVING_SCANABLE_URLS', int),
    "SCAN_TIMEOUT_MINUTES_REGISTERING_SCAN_AT_INTERNET_NL": (
        1440, 'timeout for phase REGISTERING_SCAN_AT_INTERNET_NL', int),
    "SCAN_TIMEOUT_MINUTES_IMPORTING_SCAN_RESULTS": (1440, 'timeout for phase IMPORTING_SCAN_RESULTS', int),
    "SCAN_TIMEOUT_MINUTES_CREATING_REPORT": (1440, 'timeout for phase CREATING_REPORT', int),
    "SCAN_TIMEOUT_MINUTES_SENDING_MAIL": (1440, 'timeout for phase SENDING_MAIL', int),
    "SCAN_TIMEOUT_MINUTES_SERVER_ERROR": (1440, 'timeout for phase SERVER_ERROR', int),
    "CONNECTIVITY_TEST_DOMAIN": (
        "internet.nl",
        "A server that is reachable over IPv4. This is used by a worker to determine what kind of scans it can do. "
        "Enter an address that you own or manage.",
        str,
    ),
    "IPV6_TEST_DOMAIN": (
        "internet.nl",
        "A server that is reachable over IPv6. This is used by a worker to determine "
        "what kind of scans it can do. Enter an address that you own or manage.",
        str,
    ),
    "SECURITY_TXT_IS_REDIRECTED": (False, "When a redirect is used, it will not show the content anymore.", bool),
    "SECURITY_TXT_REDIRECT_URL": ("", "The url where security.txt resides", str),
    "SECURITY_TXT_CONTENT": ("", "The content of the security.txt file, located at .well-known/security.txt", str),
    "CREDENTIAL_CHECK_URL": ("https://batch.internet.nl/api/", "The url where internet.nl api credentials are checked. "
                                                               "This is usually the api endpoint.", str),

    # enable all by default, easier for tests
    "INTERNET_NL_ADD_CALCULATED_RESULTS_WEBSECMAP": (
        True,
        "Add calculated results for web security map.",
        bool,
    ),
    "INTERNET_NL_ADD_CALCULATED_RESULTS_FORUM_STANDAARDISATIE": (
        True,
        "Add calculated results for forum standaardisatie, the internet.nl dashboard.",
        bool,
    ),
    "INTERNET_NL_ADD_CALCULATED_RESULTS_VNG_V6": (
        False,
        "Add calculated results for VNG, obsoleted IPv6 derived conclusions.",
        bool,
    ),
    "INTERNET_NL_WEB_ONLY_TOP_LEVEL": (
        False,
        "Do not send in subdomains. To reduce the number of tests while still getting an impression on a broader scope",
        bool,
    ),
}

CONSTANCE_CONFIG_FIELDSETS = OrderedDict(
    [
        ('DASHBOARD', ('DASHBOARD_FRONTEND_URL',
                       'DASHBOARD_MAXIMUM_DOMAINS_PER_LIST',
                       'DASHBOARD_MAXIMUM_DOMAINS_PER_SPREADSHEET',
                       'DASHBOARD_MAXIMUM_LISTS_PER_SPREADSHEET',
                       'DASHBOARD_SIGNUP_NOTIFICATION_EMAIL_ADRESSES',
                       'DASHBOARD_FRONT_PAGE_URL_LISTS')),
        ('E-Mail', ('EMAIL_NOTIFICATION_SENDER',
                    'EMAIL_FALLBACK_LANGUAGE',
                    'EMAIL_TEST_RECIPIENT',
                    'EMAIL_DASHBOARD_ADDRESS',)),
        ('Internet.nl Scans', ('SCAN_AT_ALL', 'INTERNET_NL_API_USERNAME', 'INTERNET_NL_API_PASSWORD',
                               'INTERNET_NL_API_URL',
                               'INTERNET_NL_MAXIMUM_URLS',
                               "CREDENTIAL_CHECK_URL",
                               'SCAN_TIMEOUT_MINUTES_DISCOVERING_ENDPOINTS',
                               'SCAN_TIMEOUT_MINUTES_RETRIEVING_SCANABLE_URLS',
                               'SCAN_TIMEOUT_MINUTES_REGISTERING_SCAN_AT_INTERNET_NL',
                               'SCAN_TIMEOUT_MINUTES_IMPORTING_SCAN_RESULTS', 'SCAN_TIMEOUT_MINUTES_CREATING_REPORT',
                               'SCAN_TIMEOUT_MINUTES_SENDING_MAIL', 'SCAN_TIMEOUT_MINUTES_SERVER_ERROR',
                               "INTERNET_NL_ADD_CALCULATED_RESULTS_WEBSECMAP",
                               "INTERNET_NL_ADD_CALCULATED_RESULTS_FORUM_STANDAARDISATIE",
                               "INTERNET_NL_ADD_CALCULATED_RESULTS_VNG_V6",
                               "INTERNET_NL_WEB_ONLY_TOP_LEVEL",
                               )),
        ("Scanning preferences", ("SCANNER_NAMESERVERS",)),
        (
            "Developer configuration. For debugging and verification",
            (
                "IPV6_TEST_DOMAIN",
                "CONNECTIVITY_TEST_DOMAIN"
            ),
        ),
        ("security.txt", ("SECURITY_TXT_IS_REDIRECTED", "SECURITY_TXT_REDIRECT_URL", "SECURITY_TXT_CONTENT")),
    ]
)

# the try-except makes sure autofix doesn't move the import to the top of the file.
# Loaded here, otherwise: django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.
try:
    from websecmap.scanners.constance import add_scanner_fields, add_scanner_fieldsets  # NOQA

    CONSTANCE_CONFIG = add_scanner_fields(CONSTANCE_CONFIG)
    CONSTANCE_CONFIG_FIELDSETS = add_scanner_fieldsets(CONSTANCE_CONFIG_FIELDSETS)
except ImportError:
    pass

JET_SIDE_MENU_ITEMS = [

    {'label': _('👤 User'), 'items': [
        {'name': 'auth.user'},
        {'name': 'internet_nl_dashboard.account'},
        {'name': 'otp_totp.totpdevice'},
    ]},

    {'label': _('📘 Dashboard'), 'items': [
        {'name': 'constance.config', 'label': '🎛️ Config'},
        {'name': 'internet_nl_dashboard.urllist', 'label': "Domain lists"},
        {'name': 'internet_nl_dashboard.taggedurlinurllist', 'label': 'Tagged Url'},
        {'name': 'internet_nl_dashboard.uploadlog', 'label': 'Uploads'},
    ]},

    {'label': _('🔬 Scan'), 'items': [
        {'name': 'internet_nl_dashboard.accountinternetnlscan'},
        {'name': 'internet_nl_dashboard.accountinternetnlscanlog'},
        {'name': 'scanners.internetnlv2scan', 'label': 'Internet.nl Scans Tasks'},
        {'name': 'scanners.internetnlv2statelog', 'label': 'Internet.nl Scans Log'},
        {'name': 'internet_nl_dashboard.subdomaindiscoveryscan', 'label': 'Subdomain Discovery'}
    ]},

    {'label': _('💽 Data'), 'items': [
        {'name': 'organizations.url', 'label': 'Urls'},
        {'name': 'scanners.endpoint', 'label': 'Endpoints'},
        {'name': 'scanners.endpointgenericscan', 'label': 'Endpoint Scans'},
    ]},

    {'label': _('📨 E-Mail (beta)'), 'items': [
        {'name': 'django_mail_admin.emailtemplate', 'label': 'Templates'},
        {'name': 'django_mail_admin.outgoingemail', 'label': 'Sent mail'},
        {'name': 'django_mail_admin.outbox', 'label': 'Outboxes'},
        {'name': 'django_mail_admin.log', 'label': 'Logs'},
    ]},

    {'label': _('📊 Report'), 'items': [
        {'name': 'reporting.urlreport', 'label': 'Url Reports'},
        {'name': 'internet_nl_dashboard.urllistreport', 'label': 'Full Reports'}
    ]},

    {'label': _('🕒 Periodic Tasks'), 'items': [

        {'name': 'django_celery_beat.periodictask'},
        {'name': 'django_celery_beat.crontabschedule'},
        {'name': 'app.job'},
    ]},

    {'label': _('✨ Activity'), 'items': [
        {'name': 'actstream.action'},
    ]},
]

JET_SIDE_MENU_COMPACT = True

# Allows to see all details of websecmap.
# Loaded here, otherwise: django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.
# try:
#     from websecmap.jet import websecmap_menu_items  # NOQA
#     JET_SIDE_MENU_ITEMS += websecmap_menu_items()
# except ImportError:
#     pass

# Security options
if not DEBUG:
    SESSION_COOKIE_SECURE = True  # insecure by default
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_AGE = 1209600  # two weeks, could be longer
    CSRF_COOKIE_SECURE = True  # insecure by default

SENTRY_DSN = os.environ.get('SENTRY_DSN')
if SENTRY_DSN:
    # new sentry_sdk implementation, with hopes to also get exceptions from workers.
    sentry_sdk.init(  # pylint: disable=abstract-class-instantiated  # (following the documentation)  # type: ignore
        dsn=SENTRY_DSN,
        integrations=[CeleryIntegration(), DjangoIntegration(), RedisIntegration()],
        release=__version__, send_default_pii=False)

SENTRY_ORGANIZATION = 'internet-cleanup-foundation'
SENTRY_PROJECT = 'internet-nl-dashboard'
SENTRY_PROJECT_URL = f'https://sentry.io/{SENTRY_ORGANIZATION}/{SENTRY_PROJECT}'

# Copied from internet.nl

# Supported languages.
# NOTE: Make sure that a DNS record for each language exists.
#       More information can be found in the README file.
LANGUAGES = sorted([
    ('nl', 'Dutch'),
    ('en', 'English'),
], key=lambda x: x[0])

# email settings...
# django_mail_admin.backends.OutboxEmailBackend = Store sent mails in outbox, so we know what has been sent.
# It's not a log -> this is just a way to test things, and it will hang send_queued_mail.
if DEBUG:
    EMAIL_BACKEND = 'django_mail_admin.backends.CustomEmailBackend'
    # As there are sanity checks, these settings need to be present during debugging too.
    EMAIL_HOST = ''
    EMAIL_PORT = ''
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''  # nosec
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False
else:
    EMAIL_BACKEND = 'django_mail_admin.backends.CustomEmailBackend'
    # todo: get these settings from internet.nl
    EMAIL_HOST = ''
    EMAIL_PORT = ''
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''  # nosec
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False

if DEBUG:
    # 25 megs for importing reports from live situations
    DATA_UPLOAD_MAX_MEMORY_SIZE = 26214400

"""
Django Jet 3:
From Django 3.0 the default value of the X_FRAME_OPTIONS setting was changed from SAMEORIGIN to DENY. This can
cause errors for popups such as for the Field Lookup Popup. To solve this you should add the following to your
Django project settings.py file:
Todo: Only needed for /admin urls, not for other urls: it's fine when people embed the map, desired even!
"""
X_FRAME_OPTIONS = "SAMEORIGIN"

# See
# https://github.com/adamchainz/django-cors-headers
CORS_ALLOWED_ORIGINS = [
    "https://acc.dashboard.internet.nl",
    "https://dashboard.internet.nl",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://127.0.0.1:8081"
]

# as soon as this is set, the vue post stuff doesn't work anymore.
# CSRF_HEADER_NAME = 'X-CSRFToken'

CORS_ALLOW_HEADERS = list(default_headers) + [
    'cache-control',
    'X-CSRFToken',
    'csrfmiddlewaretoken',
]

# allow cookies to be sent as well, we have to, because there are logins and such.
CORS_ALLOW_CREDENTIALS = True

LOCKFILE_DIR = os.environ.get('LOCKFILE_DIR', os.path.abspath(os.path.dirname(__file__)) + '/lockfiles/')

TAGGIT_CASE_INSENSITIVE = True


# Django 3.2
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# New in django 4.2:
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# required from django 4.0
CSRF_TRUSTED_ORIGINS = ["http://localhost", "https://internet.nl", "https://*.internet.nl",
                        "http://localhost", "http://127.0.0.1", "http://::1", "http://localhost:8080",
                        "http://localhost:8081"]
